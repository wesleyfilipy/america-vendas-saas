-- Script para verificar se o usu√°rio foi sincronizado
-- Execute este script no SQL Editor do Supabase

-- =====================================================
-- 1. VERIFICAR SE O USU√ÅRIO ATUAL EXISTE
-- =====================================================

SELECT 'VERIFICANDO USU√ÅRIO ATUAL:' as info;
SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM public.users WHERE id = auth.uid()) 
        THEN '‚úÖ Usu√°rio existe na tabela users'
        ELSE '‚ùå Usu√°rio N√ÉO existe na tabela users'
    END as user_status;

-- =====================================================
-- 2. MOSTRAR DADOS DO USU√ÅRIO ATUAL
-- =====================================================

SELECT 'DADOS DO USU√ÅRIO ATUAL:' as info;
SELECT 
    id,
    email,
    name,
    phone,
    created_at
FROM public.users 
WHERE id = auth.uid();

-- =====================================================
-- 3. VERIFICAR USU√ÅRIOS NO AUTH
-- =====================================================

SELECT 'USU√ÅRIOS NO AUTH:' as info;
SELECT 
    id,
    email,
    raw_user_meta_data->>'name' as name,
    raw_user_meta_data->>'phone' as phone
FROM auth.users 
WHERE email IS NOT NULL;

-- =====================================================
-- 4. VERIFICAR USU√ÅRIOS NA TABELA USERS
-- =====================================================

SELECT 'USU√ÅRIOS NA TABELA USERS:' as info;
SELECT 
    id,
    email,
    name,
    phone,
    created_at
FROM public.users;

-- =====================================================
-- 5. SINCRONIZAR USU√ÅRIOS SE NECESS√ÅRIO
-- =====================================================

-- Fun√ß√£o para sincronizar usu√°rios
CREATE OR REPLACE FUNCTION sync_users_from_auth()
RETURNS void AS $$
BEGIN
    -- Inserir usu√°rios do auth que n√£o existem na tabela users
    INSERT INTO public.users (id, email, name, phone)
    SELECT 
        au.id,
        au.email,
        COALESCE(au.raw_user_meta_data->>'name', 'Usu√°rio'),
        COALESCE(au.raw_user_meta_data->>'phone', '')
    FROM auth.users au
    WHERE NOT EXISTS (
        SELECT 1 FROM public.users u WHERE u.id = au.id
    )
    AND au.email IS NOT NULL;
    
    RAISE NOTICE 'Usu√°rios sincronizados com sucesso';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Executar sincroniza√ß√£o
SELECT 'SINCRONIZANDO USU√ÅRIOS...' as info;
SELECT sync_users_from_auth();

-- =====================================================
-- 6. VERIFICAR AP√ìS SINCRONIZA√á√ÉO
-- =====================================================

SELECT 'VERIFICA√á√ÉO AP√ìS SINCRONIZA√á√ÉO:' as info;
SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM public.users WHERE id = auth.uid()) 
        THEN '‚úÖ Usu√°rio existe na tabela users'
        ELSE '‚ùå Usu√°rio N√ÉO existe na tabela users'
    END as user_status;

-- =====================================================
-- 7. TESTE DE INSER√á√ÉO MANUAL
-- =====================================================

-- Teste de inser√ß√£o (descomente se quiser testar)
/*
SELECT 'TESTE DE INSER√á√ÉO MANUAL:' as info;
INSERT INTO public.listings (
    title,
    description,
    price,
    user_id,
    expires_at,
    category,
    status,
    is_paid
) VALUES (
    'Teste de Usu√°rio',
    'Descri√ß√£o de teste para verificar se o usu√°rio pode criar an√∫ncios',
    100.00,
    auth.uid(),
    NOW() + INTERVAL '1 day',
    'outro',
    'draft',
    false
) RETURNING id, title, status, user_id;
*/

-- =====================================================
-- 8. MENSAGEM FINAL
-- =====================================================

SELECT 'üéØ VERIFICA√á√ÉO CONCLU√çDA!' as status;
SELECT 'Agora teste criar um an√∫ncio na aplica√ß√£o!' as message; 